<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fitwork.back.board.model.repository.BoardRepository">
	<!-- 게시물 등록 -->
	<insert id="insertBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="boardNo">
		INSERT INTO board(title, writer, content)
		VALUES (#{title}, #{writer}, #{content})
	</insert>
	
	<!-- 게시물 파일 등록-->
	<insert id="insertFile" parameterType="BoardFile">
		INSERT INTO board_file(ori_name, system_name, path, board_no)
		VALUES(#{oriName}, #{systemName}, #{path}, #{boardNo})
	</insert>
	
	<!-- 게시물 전체 조회(검색, 페이징 포함) -->
	<select id="selectAllBoard" parameterType="BoardSearch" resultType="Board">
		SELECT * FROM board
		
		<if test="key != null">
			WHERE ${key} LIKE concat('%',#{word},'%')
		</if>
		
		<if test="orderBy != null">
			ORDER BY ${orderBy} ${orderByDir}
		</if>
		
		<if test="orderBy == null">
			ORDER BY id DESC
		</if>
		
		LIMIT #{offset}, #{listSize}
	</select>
	
	<!-- 페이징 처리를 위한 전체 게시물 수 반환 -->
	<select id="selectBoardCount" parameterType="BoardSearch" resultType="int">
		SELECT count(*)
		FROM board
	</select>
	
	<!-- 게시물 상세 보기 -->
	<select id="selectBoardByNo" parameterType="int" resultType="Board">
		SELECT * FROM board
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 게시물 파일 선택 -->
	<select id="selectBoardFileByNo" parameterType="int" resultType="BoardFile">
		SELECT * FROM board_file
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 게시물 조회수 업데이트 -->
	<update id="updateViewCnt" parameterType="int">
		UPDATE board
		SET view_cnt = view_cnt + 1
		WHERE board_no = #{boardNo}
	</update>
	
	<!-- 게시물 좋아요 수 증가 -->
	<update id="increaseLikeCnt" parameterType="int">
		UPDATE board
		SET like_cnt = like_cnt + 1
		WHERE board_no = #{boardNo}
	</update>
	
	<!-- 좋아요 테이블에 추가 -->
	<insert id="insertLike">
		INSERT INTO board_like(id, board_no)
		VALUES (#{id}, #{boardNo})
	</insert>
	
	<!-- 게시물 좋아요 수 감소 -->
	<update id="decreaseLikeCnt" parameterType="int">
		UPDATE board
		SET like_cnt = like_cnt - 1
		WHERE board_no = #{boardNo} AND like_cnt > 0
	</update>
	
	<!-- 좋아요 테이블에서 삭제 -->
	<delete id="deleteLike">
		DELETE FROM board_like
		WHERE id = #{id} AND board_no = #{boardNo}
	</delete>
	
	<!-- 게시물 삭제 -->
	<delete id="deleteBoard" parameterType="int">
		DELETE FROM board
		WHERE board_no = #{boardNo}
	</delete>
	
	<!-- 게시물 파일 삭제 -->
	<delete id="deleteBoardFile" parameterType="int">
		DELETE FROM board_file
		WHERE file_no = #{fileNo}
	</delete>
	
	<!-- 게시물 수정 -->
	<update id="updateBoard" parameterType="Board">
		UPDATE board
		SET title = #{title}, content = #{content}
		WHERE board_no = #{boardNo}
	</update>
	
	
	<!-- 댓글 등록 -->
	<insert id="insertComment" parameterType="Comment">
		INSERT INTO comment(writer, content)
		VALUES(#{writer}, #{content})
	</insert>
	
	<!-- 게시물 댓글 조회 -->
	<select id="selectCommentByBoardNo" resultType="Comment">
		SELECT *
		FROM comment
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 내가 쓴 댓글 조회 -->
	<select id="selectCommentByWriter" resultType="Comment">
		SELECT *
		FROM comment
		WHERE writer = #{writer}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateComment">
		UPDATE comment
		SET content = #{content}
		WHERE comment_no = #{commentNo}
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteComment">
		UPDATE comment
		SET parent_comment_number = -1
		WHERE comment_no = #{commentNo}
	</update>
	
</mapper>